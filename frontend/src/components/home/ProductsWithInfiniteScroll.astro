---
/**
 * ProductsWithInfiniteScroll - Grid de productos con scroll infinito
 * Muestra 12 productos iniciales aleatorios, 3 por fila
 * Carga 6 más por scroll, filtrables por categoría
 */

import type { Product } from '@/types';
import ProductCard from '@/components/products/ProductCard.astro';

interface Props {
  initialProducts: Product[];
  allProductsJson: string; // JSON string de todos los productos para el cliente
}

const { initialProducts, allProductsJson } = Astro.props;
---

<div class="products-infinite-scroll">
  <!-- Grid de Productos: Mobile 2 cols, Tablet/Desktop 3 cols -->
  <div id="products-grid" class="grid grid-cols-2 md:grid-cols-3 gap-6">
    {initialProducts.map((product) => (
      <ProductCard product={product} />
    ))}
  </div>

  <!-- Loading Indicator -->
  <div id="loading-indicator" class="hidden mt-8 text-center py-8">
    <div class="inline-flex items-center gap-3 text-gray-600">
      <svg class="animate-spin h-6 w-6" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span class="font-medium">Cargando más productos...</span>
    </div>
  </div>

  <!-- Empty State -->
  <div id="empty-state" class="hidden mt-8 text-center py-16">
    <svg
      class="w-24 h-24 mx-auto text-gray-300 mb-4"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="1.5"
        d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
      />
    </svg>
    <p class="text-gray-600 text-lg font-medium">No se encontraron productos en esta categoría</p>
  </div>

  <!-- No More Products -->
  <div id="no-more-products" class="hidden mt-8 text-center py-8">
    <p class="text-gray-500 text-sm font-medium">Has visto todos los productos disponibles</p>
  </div>

  <!-- Intersection Observer Target -->
  <div id="scroll-trigger" class="h-4"></div>
</div>

<script define:vars={{ allProductsJson }}>
  // Parse de todos los productos
  const allProducts = JSON.parse(allProductsJson);

  // Estado global
  let currentCategory = 'all';
  let currentPage = 1; // Empezamos en página 1 porque ya renderizamos la página 0
  let filteredProducts = [...allProducts];
  let isLoading = false;
  let hasMore = true;
  const PRODUCTS_PER_PAGE = 12; // Cargar de 12 en 12

  // Elementos del DOM
  const grid = document.getElementById('products-grid');
  const loadingIndicator = document.getElementById('loading-indicator');
  const emptyState = document.getElementById('empty-state');
  const noMoreProducts = document.getElementById('no-more-products');
  const scrollTrigger = document.getElementById('scroll-trigger');

  /**
   * Función para aleatorizar array (Fisher-Yates shuffle)
   */
  function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  /**
   * Filtrar productos por categoría
   */
  function filterProductsByCategory(category) {
    if (category === 'all') {
      return shuffleArray(allProducts.filter(p => p.activo));
    }
    return shuffleArray(allProducts.filter(p => p.activo && p.categoria === category));
  }

  /**
   * Renderizar productos en el grid
   */
  function renderProducts(products) {
    if (!grid) return;

    const fragment = document.createDocumentFragment();

    products.forEach((product) => {
      const article = document.createElement('article');
      article.className = 'flex flex-col group relative bg-white rounded-lg shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden border border-gray-300 hover:border-black';

      const descuento = product.precioDescuento
        ? Math.round((1 - product.precioDescuento / product.precio) * 100)
        : 0;

      const precioFinal = product.precioDescuento || product.precio;

      const formatPrice = (price) => {
        return new Intl.NumberFormat('es-CO', {
          style: 'currency',
          currency: 'COP',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0,
        }).format(price);
      };

      article.innerHTML = `
        ${descuento > 0 ? `
          <div class="absolute top-2 right-2 sm:top-3 sm:right-3 z-10 bg-black text-white px-2 py-1 sm:px-3 sm:py-1.5 rounded-full text-xs sm:text-sm font-bold shadow-lg">
            -${descuento}%
          </div>
        ` : ''}

        ${product.stock > 0 && product.stock <= 5 ? `
          <div class="absolute top-2 left-2 sm:top-3 sm:left-3 z-10 bg-gray-800 text-white px-2 py-0.5 sm:px-2.5 sm:py-1 rounded-full text-[10px] sm:text-xs font-semibold">
            Solo ${product.stock}
          </div>
        ` : ''}

        <a href="/productos/${product.slug}" class="flex flex-col flex-1">
          <div class="relative aspect-square overflow-hidden bg-gray-50">
            <img
              src="${product.imagenes.principal}"
              alt="${product.nombre}"
              class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
              loading="lazy"
            />
            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-5 transition-all duration-300"></div>
          </div>

          <div class="flex flex-col flex-1 p-3 sm:p-4">
            <p class="text-[9px] sm:text-[10px] uppercase tracking-wider text-gray-400 font-normal mb-1.5 sm:mb-2">
              ${product.categoria}
            </p>

            <h3 class="font-heading font-semibold text-xs sm:text-sm md:text-base text-gray-800 line-clamp-1 truncate mb-2 sm:mb-3 group-hover:text-black transition-colors min-h-[1.25rem] sm:min-h-[1.5rem]" title="${product.nombre}">
              ${product.nombre}
            </h3>

            <div class="flex flex-wrap items-baseline gap-1.5 sm:gap-2 mb-3 sm:mb-4">
              <span class="text-lg sm:text-xl md:text-2xl font-bold text-black">
                ${formatPrice(precioFinal)}
              </span>
              ${product.precioDescuento ? `
                <span class="text-xs sm:text-sm text-gray-600 line-through font-medium">
                  ${formatPrice(product.precio)}
                </span>
              ` : ''}
            </div>

            <div class="flex-1"></div>

            <div class="flex items-center justify-between gap-2 sm:gap-3 pt-2 sm:pt-3 border-t border-gray-300">
              ${product.stock > 0 ? `
                <div class="flex items-center gap-0.5 sm:gap-1 quantity-selector">
                  <button type="button" class="quantity-btn-decrease w-7 h-7 sm:w-6 sm:h-6 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-100 transition-colors text-gray-700" data-product-id="${product.id}" aria-label="Disminuir cantidad">
                    <svg class="w-3 h-3 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M20 12H4"/>
                    </svg>
                  </button>
                  <input type="text" inputmode="numeric" pattern="[0-9]*" class="quantity-input w-10 h-7 sm:w-12 sm:h-6 text-center text-xs font-semibold border border-gray-300 rounded focus:outline-none focus:border-black" value="1" data-min="1" data-max="${product.stock}" data-product-id="${product.id}" />
                  <button type="button" class="quantity-btn-increase w-7 h-7 sm:w-6 sm:h-6 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-100 transition-colors text-gray-700" data-product-id="${product.id}" aria-label="Aumentar cantidad">
                    <svg class="w-3 h-3 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"/>
                    </svg>
                  </button>
                </div>
              ` : `
                <span class="text-[10px] sm:text-xs text-gray-500 font-medium">Agotado</span>
              `}

              <button
                data-product-id="${product.id}"
                data-product='${JSON.stringify({
                  id: product.id,
                  sku: product.sku,
                  nombre: product.nombre,
                  precio: precioFinal,
                  imagen: product.imagenes.principal,
                  stockDisponible: product.stock
                })}'
                class="add-to-cart-btn flex-1 px-2 py-1.5 sm:px-3 sm:py-2 rounded-lg font-semibold text-xs transition-all duration-200 ${
                  product.stock > 0
                    ? 'bg-black text-white hover:bg-gray-800 active:scale-95'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }"
                ${product.stock === 0 ? 'disabled' : ''}
              >
                ${product.stock > 0 ? `
                  <span class="flex items-center justify-center gap-1">
                    <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-1.5 5M17 13l1.5 5m-9.5 0a1 1 0 100 2 1 1 0 000-2zm8 0a1 1 0 100 2 1 1 0 000-2z"/>
                    </svg>
                    <span class="hidden lg:inline">Agregar</span>
                  </span>
                ` : 'Agotado'}
              </button>
            </div>
          </div>
        </a>
      `;

      fragment.appendChild(article);
    });

    grid.appendChild(fragment);
  }

  /**
   * Limpiar grid
   */
  function clearGrid() {
    if (grid) {
      grid.innerHTML = '';
    }
  }

  /**
   * Cargar más productos
   */
  function loadMoreProducts() {
    if (isLoading || !hasMore) return;

    isLoading = true;
    loadingIndicator?.classList.remove('hidden');

    // Simular delay de red (opcional, puedes quitarlo)
    setTimeout(() => {
      const start = currentPage * PRODUCTS_PER_PAGE;
      const end = start + PRODUCTS_PER_PAGE;
      const productsToLoad = filteredProducts.slice(start, end);

      if (productsToLoad.length === 0) {
        hasMore = false;
        noMoreProducts?.classList.remove('hidden');
      } else {
        renderProducts(productsToLoad);
        currentPage++;

        if (end >= filteredProducts.length) {
          hasMore = false;
          noMoreProducts?.classList.remove('hidden');
        }
      }

      loadingIndicator?.classList.add('hidden');
      isLoading = false;
    }, 500);
  }

  /**
   * Cambiar categoría
   */
  function changeCategory(category) {
    currentCategory = category;
    currentPage = 0;
    hasMore = true;

    // Filtrar productos
    filteredProducts = filterProductsByCategory(category);

    // Limpiar UI
    clearGrid();
    emptyState?.classList.add('hidden');
    noMoreProducts?.classList.add('hidden');

    // Cargar primeros productos o mostrar empty state
    if (filteredProducts.length === 0) {
      emptyState?.classList.remove('hidden');
    } else {
      // Cargar 12 productos iniciales
      const initialBatch = filteredProducts.slice(0, PRODUCTS_PER_PAGE);
      renderProducts(initialBatch);
      currentPage = 1; // Ya cargamos la página 0, siguiente es 1

      if (filteredProducts.length <= PRODUCTS_PER_PAGE) {
        hasMore = false;
        if (filteredProducts.length > 0) {
          noMoreProducts?.classList.remove('hidden');
        }
      }
    }

    // Scroll suave al inicio de productos
    grid?.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }

  // Intersection Observer para scroll infinito
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && hasMore && !isLoading) {
          loadMoreProducts();
        }
      });
    },
    {
      rootMargin: '200px', // Cargar 200px antes de llegar al final
    }
  );

  if (scrollTrigger) {
    observer.observe(scrollTrigger);
  }

  // Escuchar cambios de categoría
  window.addEventListener('categoryChange', (e) => {
    const { category } = e.detail;
    changeCategory(category);
  });

  // Configurar estado inicial basado en productos cargados desde el servidor
  if (filteredProducts.length <= PRODUCTS_PER_PAGE) {
    hasMore = false;
    if (filteredProducts.length > 0 && filteredProducts.length < PRODUCTS_PER_PAGE) {
      noMoreProducts?.classList.remove('hidden');
    }
  }
</script>
