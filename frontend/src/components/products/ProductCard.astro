---
/**
 * ProductCard - Tarjeta de producto para grid
 */

import type { Product } from '@/types';

interface Props {
  product: Product;
}

const { product } = Astro.props;

// Calcular descuento
const descuento = product.precioDescuento
  ? Math.round((1 - product.precioDescuento / product.precio) * 100)
  : 0;

// Formato de precio colombiano
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
};

const precioFinal = product.precioDescuento || product.precio;
---

<article class="flex flex-col group relative bg-white rounded-lg shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden border border-gray-300 hover:border-black">
  <!-- Badge de Descuento - Responsive -->
  {descuento > 0 && (
    <div class="absolute top-2 right-2 sm:top-3 sm:right-3 z-10 bg-black text-white px-2 py-1 sm:px-3 sm:py-1.5 rounded-full text-xs sm:text-sm font-bold shadow-lg">
      -{descuento}%
    </div>
  )}

  <!-- Badge de Stock Bajo - Responsive -->
  {product.stock > 0 && product.stock <= 5 && (
    <div class="absolute top-2 left-2 sm:top-3 sm:left-3 z-10 bg-gray-800 text-white px-2 py-0.5 sm:px-2.5 sm:py-1 rounded-full text-[10px] sm:text-xs font-semibold">
      Solo {product.stock}
    </div>
  )}

  <a href={`/productos/${product.slug}`} class="flex flex-col flex-1">
    <!-- Imagen del Producto -->
    <div class="relative aspect-square overflow-hidden bg-gray-50">
      <img
        src={product.imagenes.principal}
        alt={product.nombre}
        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
        loading="lazy"
      />

      <!-- Overlay sutil al hover -->
      <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-5 transition-all duration-300"></div>
    </div>

    <!-- Contenido - Padding Responsive + Flex Column -->
    <div class="flex flex-col flex-1 p-3 sm:p-4">
      <!-- Categoría - Responsive -->
      <p class="text-[9px] sm:text-[10px] uppercase tracking-wider text-gray-400 font-normal mb-1.5 sm:mb-2">
        {product.categoria}
      </p>

      <!-- Nombre - Responsive -->
      <h3 class="font-heading font-semibold text-xs sm:text-sm md:text-base text-gray-800 line-clamp-1 truncate mb-2 sm:mb-3 group-hover:text-black transition-colors min-h-[1.25rem] sm:min-h-[1.5rem]" title={product.nombre}>
        {product.nombre}
      </h3>

      <!-- Precio - Responsive -->
      <div class="flex flex-wrap items-baseline gap-1.5 sm:gap-2 mb-3 sm:mb-4">
        <span class="text-lg sm:text-xl md:text-2xl font-bold text-black">
          {formatPrice(precioFinal)}
        </span>
        {product.precioDescuento && (
          <span class="text-xs sm:text-sm text-gray-600 line-through font-medium">
            {formatPrice(product.precio)}
          </span>
        )}
      </div>

      <!-- Spacer: Empuja el footer hacia abajo -->
      <div class="flex-1"></div>

      <!-- Footer: Selector Cantidad y Botón - Responsive (SIEMPRE AL FONDO) -->
      <div class="flex items-center justify-between gap-2 sm:gap-3 pt-2 sm:pt-3 border-t border-gray-300">
        <!-- Selector de Cantidad - Responsive (más grande en mobile para touch) -->
        {product.stock > 0 ? (
          <div class="flex items-center gap-0.5 sm:gap-1 quantity-selector">
            <button
              type="button"
              class="quantity-btn-decrease w-7 h-7 sm:w-6 sm:h-6 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-100 transition-colors text-gray-700"
              data-product-id={product.id}
              aria-label="Disminuir cantidad"
            >
              <svg class="w-3 h-3 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                <path stroke-linecap="round" stroke-linejoin="round" d="M20 12H4"/>
              </svg>
            </button>
            <input
              type="text"
              inputmode="numeric"
              pattern="[0-9]*"
              class="quantity-input w-10 h-7 sm:w-12 sm:h-6 text-center text-xs font-semibold border border-gray-300 rounded focus:outline-none focus:border-black"
              value="1"
              data-min="1"
              data-max={product.stock}
              data-product-id={product.id}
            />
            <button
              type="button"
              class="quantity-btn-increase w-7 h-7 sm:w-6 sm:h-6 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-100 transition-colors text-gray-700"
              data-product-id={product.id}
              aria-label="Aumentar cantidad"
            >
              <svg class="w-3 h-3 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"/>
              </svg>
            </button>
          </div>
        ) : (
          <span class="text-[10px] sm:text-xs text-gray-500 font-medium">Agotado</span>
        )}

        <!-- Botón Agregar - Responsive -->
        <button
          data-product-id={product.id}
          data-product={JSON.stringify({
            productId: product.id,
            sku: product.sku,
            nombre: product.nombre,
            precio: precioFinal,
            imagen: product.imagenes.principal,
            stockDisponible: product.stock
          })}
          class={`
            add-to-cart-btn flex-1
            px-2 py-1.5 sm:px-3 sm:py-2 rounded-lg font-semibold text-xs
            transition-all duration-200
            ${product.stock > 0
              ? 'bg-black text-white hover:bg-gray-800 active:scale-95'
              : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }
          `}
          disabled={product.stock === 0}
        >
          {product.stock > 0 ? (
            <span class="flex items-center justify-center gap-1">
              <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-1.5 5M17 13l1.5 5m-9.5 0a1 1 0 100 2 1 1 0 000-2zm8 0a1 1 0 100 2 1 1 0 000-2z"/>
              </svg>
              <span class="hidden lg:inline">Agregar</span>
            </span>
          ) : (
            'Agotado'
          )}
        </button>
      </div>
    </div>
  </a>
</article>

<script>
  import { addToCart } from '@/stores/cartStore';
  import { toastSuccess, toastError } from '@/stores/toastStore';

  // Delegación de eventos para botones y clicks (funciona con contenido dinámico)
  document.addEventListener('click', (e) => {
    // Prevenir navegación al hacer clic en inputs de cantidad
    const inputClicked = (e.target as HTMLElement).closest('.quantity-input');
    if (inputClicked) {
      e.preventDefault();
      e.stopPropagation();
      (inputClicked as HTMLInputElement).focus();
      return;
    }

    // Botón Decrease (-)
    const decreaseBtn = (e.target as HTMLElement).closest('.quantity-btn-decrease');
    if (decreaseBtn) {
      e.preventDefault();
      e.stopPropagation();

      const productId = (decreaseBtn as HTMLElement).dataset.productId;
      const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`) as HTMLInputElement;

      if (input) {
        const min = parseInt(input.dataset.min || '1');
        let currentValue = parseInt(input.value) || min;
        if (currentValue > min) {
          input.value = (currentValue - 1).toString();
        }
      }
      return;
    }

    // Botón Increase (+)
    const increaseBtn = (e.target as HTMLElement).closest('.quantity-btn-increase');
    if (increaseBtn) {
      e.preventDefault();
      e.stopPropagation();

      const productId = (increaseBtn as HTMLElement).dataset.productId;
      const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`) as HTMLInputElement;

      if (input) {
        const min = parseInt(input.dataset.min || '1');
        const max = parseInt(input.dataset.max || '99');
        let currentValue = parseInt(input.value) || min;
        if (currentValue < max) {
          input.value = (currentValue + 1).toString();
        }
      }
      return;
    }

    // Botón Agregar al Carrito
    const addBtn = (e.target as HTMLElement).closest('.add-to-cart-btn');
    if (addBtn) {
      e.preventDefault();
      e.stopPropagation();

      const button = addBtn as HTMLButtonElement;
      const productData = button.dataset.product;
      const productId = button.dataset.productId;

      if (productData) {
        try {
          const product = JSON.parse(productData);
          const quantityInput = document.querySelector(`.quantity-input[data-product-id="${productId}"]`) as HTMLInputElement;
          const quantity = quantityInput ? parseInt(quantityInput.value) || 1 : 1;

          const success = addToCart(product, quantity);

          if (success) {
            const quantityText = quantity > 1 ? `${quantity}x ` : '';
            toastSuccess(`${quantityText}${product.nombre} agregado al carrito`);

            const originalContent = button.innerHTML;
            button.innerHTML = '✓ Agregado';
            button.classList.add('bg-gray-800');
            button.classList.remove('bg-black');

            setTimeout(() => {
              button.innerHTML = originalContent;
              button.classList.remove('bg-gray-800');
              button.classList.add('bg-black');

              if (quantityInput) {
                quantityInput.value = '1';
              }
            }, 1500);
          } else {
            toastError(`No hay stock disponible de ${product.nombre}`);
            const originalContent = button.innerHTML;
            button.textContent = 'Sin stock';
            button.classList.add('bg-gray-500');

            setTimeout(() => {
              button.innerHTML = originalContent;
              button.classList.remove('bg-gray-500');
            }, 1500);
          }
        } catch (error) {
          console.error('Error al agregar al carrito:', error);
          toastError('Error al agregar el producto');
        }
      }
    }
  });

  // Validación del input manual de cantidad (delegación con input event)
  document.addEventListener('input', (e) => {
    const target = e.target as HTMLElement;
    if (!target.classList.contains('quantity-input')) return;

    const inputElement = target as HTMLInputElement;
    let value = inputElement.value.replace(/[^0-9]/g, '');
    const min = parseInt(inputElement.dataset.min || '1');
    const max = parseInt(inputElement.dataset.max || '99');

    if (value === '') {
      inputElement.value = '';
      return;
    }

    let numValue = parseInt(value);
    if (numValue < min) numValue = min;
    if (numValue > max) numValue = max;
    inputElement.value = numValue.toString();
  });

  // Validar al perder foco
  document.addEventListener('blur', (e) => {
    const target = e.target as HTMLElement;
    if (!target.classList.contains('quantity-input')) return;

    const inputElement = target as HTMLInputElement;
    const min = parseInt(inputElement.dataset.min || '1');
    if (!inputElement.value || parseInt(inputElement.value) < min) {
      inputElement.value = min.toString();
    }
  }, true);
</script>
