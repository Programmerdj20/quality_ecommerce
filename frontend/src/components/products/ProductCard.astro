---
/**
 * ProductCard - Tarjeta de producto para grid
 */

import type { Product } from '@/types';

interface Props {
  product: Product;
}

const { product } = Astro.props;

// Calcular descuento
const descuento = product.precioDescuento
  ? Math.round((1 - product.precioDescuento / product.precio) * 100)
  : 0;

// Formato de precio colombiano
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
};

const precioFinal = product.precioDescuento || product.precio;
---

<article class="group relative bg-white rounded-xl shadow-md hover:shadow-2xl transition-all duration-300 overflow-hidden border border-gray-100">
  <!-- Badge de Descuento -->
  {descuento > 0 && (
    <div class="absolute top-3 right-3 z-10 bg-red-600 text-white px-4 py-2 rounded-full text-base font-black shadow-xl border-2 border-white">
      -{descuento}%
    </div>
  )}

  <!-- Badge de Stock Bajo -->
  {product.stock > 0 && product.stock <= 5 && (
    <div class="absolute top-3 left-3 z-10 bg-orange-500 text-white px-3 py-1.5 rounded-full text-xs font-semibold">
      ¡Solo {product.stock} disponibles!
    </div>
  )}

  <a href={`/productos/${product.slug}`} class="block">
    <!-- Imagen del Producto -->
    <div class="relative aspect-square overflow-hidden bg-gray-50">
      <img
        src={product.imagenes.principal}
        alt={product.nombre}
        class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
        loading="lazy"
      />

      <!-- Overlay al hover -->
      <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300"></div>
    </div>

    <!-- Contenido -->
    <div class="p-5">
      <!-- Categoría -->
      <p class="text-xs uppercase tracking-wide text-text-secondary font-medium mb-2">
        {product.categoria}
      </p>

      <!-- Nombre -->
      <h3 class="font-heading font-semibold text-base md:text-lg text-text line-clamp-2 mb-3 group-hover:text-primary transition-colors min-h-[3rem]">
        {product.nombre}
      </h3>

      <!-- Precio -->
      <div class="flex flex-wrap items-baseline gap-2 mb-4">
        <span class="text-2xl md:text-3xl font-black text-green-600">
          {formatPrice(precioFinal)}
        </span>
        {product.precioDescuento && (
          <span class="text-sm md:text-base text-gray-400 line-through font-medium">
            {formatPrice(product.precio)}
          </span>
        )}
      </div>

      <!-- Footer: Stock y Botón -->
      <div class="flex items-center justify-between pt-3 border-t border-gray-100">
        <!-- Indicador de Stock -->
        <div class="flex items-center gap-1.5">
          {product.stock > 0 ? (
            <>
              <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span class="text-xs text-green-700 font-medium">
                En stock
              </span>
            </>
          ) : (
            <>
              <div class="w-2 h-2 bg-red-500 rounded-full"></div>
              <span class="text-xs text-red-700 font-medium">
                Agotado
              </span>
            </>
          )}
        </div>

        <!-- Botón Agregar -->
        <button
          data-product-id={product.id}
          data-product={JSON.stringify({
            id: product.id,
            sku: product.sku,
            nombre: product.nombre,
            precio: precioFinal,
            imagen: product.imagenes.principal,
            stockDisponible: product.stock
          })}
          class={`
            add-to-cart-btn
            px-5 py-2.5 rounded-lg font-bold text-sm
            transition-all duration-200
            border-2
            ${product.stock > 0
              ? 'bg-orange-500 border-orange-600 text-white hover:bg-orange-600 hover:shadow-lg hover:scale-105 active:scale-95'
              : 'bg-gray-200 border-gray-300 text-gray-500 cursor-not-allowed'
            }
          `}
          disabled={product.stock === 0}
        >
          {product.stock > 0 ? (
            <span class="flex items-center justify-center gap-1.5">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"/>
              </svg>
              <span>Agregar</span>
            </span>
          ) : (
            'Agotado'
          )}
        </button>
      </div>
    </div>
  </a>
</article>

<script>
  import { addToCart } from '@/stores/cartStore';
  import { toastSuccess, toastError } from '@/stores/toastStore';

  // Script del lado del cliente para manejar agregar al carrito
  document.querySelectorAll('.add-to-cart-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();

      const button = e.currentTarget as HTMLButtonElement;
      const productData = button.dataset.product;

      if (productData) {
        try {
          const product = JSON.parse(productData);

          // Agregar al carrito
          const success = addToCart(product, 1);

          if (success) {
            // Toast de éxito
            toastSuccess(`${product.nombre} agregado al carrito`);

            // Feedback visual de éxito
            const originalContent = button.innerHTML;
            button.innerHTML = '✓ Agregado';
            button.classList.add('bg-green-600', 'border-green-700');
            button.classList.remove('bg-orange-500', 'border-orange-600');

            setTimeout(() => {
              button.innerHTML = originalContent;
              button.classList.remove('bg-green-600', 'border-green-700');
              button.classList.add('bg-orange-500', 'border-orange-600');
            }, 1500);
          } else {
            // Si falla (por ejemplo, sin stock)
            toastError(`No hay stock disponible de ${product.nombre}`);

            button.textContent = 'Sin stock';
            button.classList.add('bg-red-600', 'border-red-700');

            setTimeout(() => {
              button.innerHTML = `
                <span class="flex items-center gap-1.5">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"/>
                  </svg>
                  <span>Agregar</span>
                </span>
              `;
              button.classList.remove('bg-red-600', 'border-red-700');
            }, 1500);
          }
        } catch (error) {
          console.error('Error al agregar al carrito:', error);
          toastError('Error al agregar el producto');
        }
      }
    });
  });
</script>
