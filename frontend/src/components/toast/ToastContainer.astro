---
/**
 * ToastContainer - Contenedor global para notificaciones Toast
 * Se renderiza en BaseLayout y maneja todos los toasts
 */
---

<div
  id="toast-container"
  class="fixed top-4 right-4 z-[9999] flex flex-col gap-3 pointer-events-none"
  aria-live="polite"
  aria-atomic="true"
>
  <!-- Los toasts se inyectarán aquí dinámicamente -->
</div>

<script>
  import { toastsStore, removeToast, type Toast } from '@/stores/toastStore';

  const container = document.getElementById('toast-container');

  /**
   * Renderiza un toast individual
   */
  function renderToast(toast: Toast): HTMLDivElement {
    const toastEl = document.createElement('div');
    toastEl.id = toast.id;
    toastEl.className = `
      toast-item
      pointer-events-auto
      flex items-start gap-3
      min-w-80 max-w-md
      p-4 rounded-lg shadow-2xl
      border-l-4
      transform transition-all duration-300
      animate-slide-in-right
      ${getToastStyles(toast.type)}
    `;

    // Icono según el tipo
    const icon = getToastIcon(toast.type);

    toastEl.innerHTML = `
      <div class="flex-shrink-0 mt-0.5">
        ${icon}
      </div>
      <div class="flex-1 min-w-0">
        <p class="text-sm font-medium leading-snug break-words">
          ${escapeHtml(toast.message)}
        </p>
      </div>
      <button
        class="flex-shrink-0 ml-2 hover:opacity-70 transition-opacity"
        onclick="window.removeToast('${toast.id}')"
        aria-label="Cerrar notificación"
      >
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    `;

    return toastEl;
  }

  /**
   * Obtiene los estilos según el tipo de toast
   */
  function getToastStyles(type: string): string {
    switch (type) {
      case 'success':
        return 'bg-green-50 border-green-500 text-green-900';
      case 'error':
        return 'bg-red-50 border-red-500 text-red-900';
      case 'warning':
        return 'bg-orange-50 border-orange-500 text-orange-900';
      case 'info':
      default:
        return 'bg-blue-50 border-blue-500 text-blue-900';
    }
  }

  /**
   * Obtiene el icono según el tipo de toast
   */
  function getToastIcon(type: string): string {
    switch (type) {
      case 'success':
        return `
          <svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        `;
      case 'error':
        return `
          <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        `;
      case 'warning':
        return `
          <svg class="w-6 h-6 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        `;
      case 'info':
      default:
        return `
          <svg class="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        `;
    }
  }

  /**
   * Escapa HTML para prevenir XSS
   */
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Remueve un toast con animación
   */
  function removeToastWithAnimation(id: string) {
    const toastEl = document.getElementById(id);
    if (toastEl) {
      toastEl.classList.add('animate-slide-out-right', 'opacity-0');
      setTimeout(() => {
        removeToast(id);
      }, 300);
    } else {
      removeToast(id);
    }
  }

  // Exponer función globalmente para el botón de cerrar
  (window as any).removeToast = removeToastWithAnimation;

  /**
   * Renderiza todos los toasts activos
   */
  function renderToasts(toasts: Toast[]) {
    if (!container) return;

    // Obtener IDs actuales
    const currentIds = toasts.map(t => t.id);
    const existingIds = Array.from(container.children).map(el => el.id);

    // Remover toasts que ya no existen
    existingIds.forEach(id => {
      if (!currentIds.includes(id)) {
        const el = document.getElementById(id);
        el?.remove();
      }
    });

    // Agregar nuevos toasts
    toasts.forEach(toast => {
      if (!document.getElementById(toast.id)) {
        const toastEl = renderToast(toast);
        container.appendChild(toastEl);
      }
    });
  }

  // Suscribirse a cambios en el store
  toastsStore.subscribe(renderToasts);

  // Renderizar toasts iniciales
  renderToasts(toastsStore.get());
</script>

<style>
  @keyframes slide-in-right {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slide-out-right {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  .animate-slide-in-right {
    animation: slide-in-right 0.3s ease-out;
  }

  .animate-slide-out-right {
    animation: slide-out-right 0.3s ease-in;
  }
</style>
