---
/**
 * Header - Navbar Minimalista con diseño premium
 * Layout: [Logo] --- [Búsqueda Centro] --- [Ingresar/Registrarse | Carrito]
 * Con branding dinámico por tenant
 */

import type { TenantContext } from '@/types';
import { getTenantLogo, getTenantDisplayName } from '@/types';

interface Props {
  tenant: TenantContext;
}

const { tenant } = Astro.props;

// Obtener logo y nombre del tenant
const tenantLogo = getTenantLogo(tenant);
const tenantName = getTenantDisplayName(tenant);

// Obtener iniciales para logo alternativo
const initials = tenantName
  .split(' ')
  .map(word => word[0])
  .join('')
  .toUpperCase()
  .slice(0, 2);

// Colores del branding del tenant (si existen)
const primaryColor = tenant.configuracion?.colores?.primary || '#000000';
---

<header class="sticky top-0 z-50 bg-white border-b border-gray-300 shadow-sm">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between gap-4 h-16 lg:h-18">
      <!-- Left Section: Hamburger (mobile) + Logo -->
      <div class="flex items-center gap-4 flex-shrink-0">
        <!-- Botón Hamburguesa (solo mobile/tablet) -->
        <button
          id="mobile-menu-trigger"
          class="lg:hidden p-2 hover:bg-gray-100 rounded-lg transition-colors"
          aria-label="Abrir menú"
        >
          <svg
            id="hamburger-icon"
            class="w-6 h-6 text-gray-800 transition-transform duration-300"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            ></path>
          </svg>
        </button>

        <!-- Logo del Tenant (dinámico) -->
        <a href="/" class="flex items-center group">
          {tenantLogo ? (
            <!-- Logo como imagen -->
            <img
              src={tenantLogo}
              alt={tenantName}
              class="h-10 w-auto max-w-[200px] object-contain"
            />
          ) : (
            <!-- Logo con iniciales (fallback) -->
            <div
              class="w-10 h-10 rounded-lg flex items-center justify-center text-white font-bold text-lg group-hover:opacity-90 transition-opacity"
              style={`background-color: ${primaryColor}`}
            >
              {initials}
            </div>
          )}

          <!-- Nombre del sitio (opcional, oculto en mobile) -->
          {!tenantLogo && (
            <span class="ml-3 font-heading font-semibold text-lg text-gray-800 hidden md:block">
              {tenantName}
            </span>
          )}
        </a>
      </div>

      <!-- Center Section: Barra de búsqueda (desktop) -->
      <div class="hidden lg:flex flex-1 max-w-xl mx-8">
        <button
          id="search-trigger-desktop"
          class="w-full flex items-center gap-3 px-4 py-2.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group"
          aria-label="Buscar productos"
        >
          <svg
            class="w-5 h-5 text-gray-500 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            ></path>
          </svg>
          <span class="text-sm text-gray-500 font-medium">Buscar productos...</span>
        </button>
      </div>

      <!-- Right Section: Búsqueda (mobile) | Login | Carrito -->
      <div class="flex items-center gap-2 flex-shrink-0">
        <!-- Botón Búsqueda (solo mobile) -->
        <button
          id="search-trigger-mobile"
          class="lg:hidden p-2.5 hover:bg-gray-100 rounded-full transition-colors group"
          aria-label="Buscar productos"
        >
          <svg
            class="w-5 h-5 text-gray-800 group-hover:text-black transition-colors"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            ></path>
          </svg>
        </button>

        <!-- Botón Login / Registrarse -->
        <a
          href="/cuenta/login"
          class="hidden sm:flex px-3 py-2 text-sm font-medium text-gray-800 hover:text-black hover:bg-gray-100 rounded-lg transition-colors"
          aria-label="Ingresar o registrarse"
        >
          Ingresar/Registrarse
        </a>

        <!-- Botón Carrito con Badge -->
        <button
          id="cart-trigger"
          class="relative p-2.5 hover:bg-gray-100 rounded-full transition-colors group"
          aria-label="Abrir carrito de compras"
        >
          <svg
            class="w-5 h-5 text-gray-800 group-hover:text-black transition-colors"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
            ></path>
          </svg>

          <!-- Badge Contador -->
          <span
            id="cart-count"
            class="absolute -top-0.5 -right-0.5 bg-black text-white text-xs font-bold rounded-full min-w-5 h-5 px-1.5 flex items-center justify-center hidden"
          >
            0
          </span>
        </button>
      </div>
    </div>
  </div>
</header>

<script>
  import { cartStore } from '@/stores/cartStore';

  // ============================================
  // Mobile Menu Trigger
  // ============================================
  const mobileMenuTrigger = document.getElementById('mobile-menu-trigger');
  const hamburgerIcon = document.getElementById('hamburger-icon');

  mobileMenuTrigger?.addEventListener('click', () => {
    // Toggle mobile menu (se implementará en MobileMenu.astro)
    if (typeof (window as any).toggleMobileMenu === 'function') {
      (window as any).toggleMobileMenu();

      // Animar icono hamburguesa → X
      hamburgerIcon?.classList.toggle('rotate-90');
    }
  });

  // ============================================
  // Search Trigger (Desktop y Mobile)
  // ============================================
  const searchTriggerDesktop = document.getElementById('search-trigger-desktop');
  const searchTriggerMobile = document.getElementById('search-trigger-mobile');

  searchTriggerDesktop?.addEventListener('click', () => {
    if (typeof (window as any).openSearchModal === 'function') {
      (window as any).openSearchModal();
    }
  });

  searchTriggerMobile?.addEventListener('click', () => {
    if (typeof (window as any).openSearchModal === 'function') {
      (window as any).openSearchModal();
    }
  });

  // ============================================
  // Cart Trigger
  // ============================================
  const cartTrigger = document.getElementById('cart-trigger');

  cartTrigger?.addEventListener('click', () => {
    if (typeof (window as any).openCart === 'function') {
      (window as any).openCart();
    }
  });

  // ============================================
  // Cart Badge Update
  // ============================================
  const cartBadge = document.getElementById('cart-count');

  cartStore.subscribe((cart) => {
    if (cartBadge) {
      cartBadge.textContent = cart.itemCount.toString();

      if (cart.itemCount > 0) {
        cartBadge.classList.remove('hidden');
      } else {
        cartBadge.classList.add('hidden');
      }
    }
  });
</script>
