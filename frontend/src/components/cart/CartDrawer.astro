---
/**
 * CartDrawer - Sidebar deslizable del carrito
 * Se controla con JavaScript del lado del cliente
 */
---

<!-- Overlay oscuro -->
<div
  id="cart-overlay"
  class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden transition-opacity"
></div>

<!-- Drawer del Carrito -->
<div
  id="cart-drawer"
  class="fixed top-0 right-0 h-full w-full sm:w-96 bg-white shadow-2xl z-50 transform translate-x-full transition-transform duration-300 flex flex-col"
>
  <!-- Header del Drawer -->
  <div class="flex items-center justify-between p-6 border-b border-gray-200">
    <h2 class="font-heading font-bold text-2xl text-text">
      Carrito de Compras
    </h2>
    <button
      id="close-cart-btn"
      class="p-2 hover:bg-gray-100 rounded-full transition-colors"
      aria-label="Cerrar carrito"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>

  <!-- Items del Carrito (scrollable) -->
  <div id="cart-items-container" class="flex-1 overflow-y-auto p-6">
    <!-- Los items se inyectarán aquí dinámicamente -->
    <div id="cart-items-list" class="space-y-4">
      <!-- CartItem components -->
    </div>

    <!-- Empty State -->
    <div id="cart-empty" class="hidden text-center py-16">
      <svg class="w-24 h-24 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
      </svg>
      <p class="text-text-secondary text-lg font-medium mb-2">Tu carrito está vacío</p>
      <p class="text-text-secondary text-sm mb-6">Agrega productos para comenzar a comprar</p>
      <a
        href="/productos"
        class="inline-block px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
      >
        Ver Productos
      </a>
    </div>
  </div>

  <!-- Footer con Resumen y Checkout -->
  <div id="cart-footer" class="border-t border-gray-200 p-6 bg-gray-50">
    <!-- Resumen de Precios -->
    <div class="space-y-2 mb-4">
      <div class="flex justify-between text-sm">
        <span class="text-text-secondary">Subtotal:</span>
        <span class="font-medium" id="cart-subtotal">$0</span>
      </div>
      <div class="flex justify-between text-sm">
        <span class="text-text-secondary">IVA (19%):</span>
        <span class="font-medium" id="cart-iva">$0</span>
      </div>
      <div class="flex justify-between text-lg font-bold pt-2 border-t border-gray-300">
        <span>Total:</span>
        <span class="text-primary" id="cart-total">$0</span>
      </div>
    </div>

    <!-- Botones de Acción -->
    <div class="space-y-3">
      <a
        href="/checkout"
        id="checkout-btn"
        class="block w-full py-4 bg-accent text-white text-center font-bold rounded-lg hover:bg-accent/90 transition-all hover:shadow-lg transform hover:scale-[1.02] active:scale-[0.98]"
      >
        Proceder al Pago
      </a>
      <button
        id="continue-shopping-btn"
        class="block w-full py-3 bg-white text-primary text-center font-semibold border-2 border-primary rounded-lg hover:bg-primary hover:text-white transition-colors"
      >
        Seguir Comprando
      </button>
    </div>
  </div>
</div>

<script>
  import { cartStore, removeFromCart, incrementQuantity, decrementQuantity, formatPrice } from '@/stores/cartStore';
  import { toastSuccess, toastInfo, toastWarning } from '@/stores/toastStore';
  import type { Cart } from '@/types';

  // Elementos del DOM
  const drawer = document.getElementById('cart-drawer');
  const overlay = document.getElementById('cart-overlay');
  const closeBtn = document.getElementById('close-cart-btn');
  const continueBtn = document.getElementById('continue-shopping-btn');
  const itemsList = document.getElementById('cart-items-list');
  const emptyState = document.getElementById('cart-empty');
  const footer = document.getElementById('cart-footer');

  // Función para abrir el drawer
  function openDrawer() {
    drawer?.classList.remove('translate-x-full');
    overlay?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  // Función para cerrar el drawer
  function closeDrawer() {
    drawer?.classList.add('translate-x-full');
    overlay?.classList.add('hidden');
    document.body.style.overflow = '';
  }

  // Event listeners para abrir/cerrar
  closeBtn?.addEventListener('click', closeDrawer);
  continueBtn?.addEventListener('click', closeDrawer);
  overlay?.addEventListener('click', closeDrawer);

  // Exponer función globalmente para que el CartWidget pueda abrirlo
  (window as any).openCart = openDrawer;
  (window as any).closeCart = closeDrawer;

  // Función para renderizar items del carrito
  function renderCartItems(cart: Cart) {
    if (!itemsList || !emptyState || !footer) return;

    if (cart.items.length === 0) {
      itemsList.innerHTML = '';
      emptyState.classList.remove('hidden');
      footer.classList.add('hidden');
    } else {
      emptyState.classList.add('hidden');
      footer.classList.remove('hidden');

      itemsList.innerHTML = cart.items.map(item => `
        <div class="cart-item flex gap-4 p-4 bg-white rounded-lg border border-gray-200 hover:border-gray-300 transition-colors" data-product-id="${item.productId}">
          <div class="flex-shrink-0">
            <img src="${item.imagen}" alt="${item.nombre}" class="w-20 h-20 object-cover rounded-md" />
          </div>
          <div class="flex-1 min-w-0">
            <h4 class="font-semibold text-text line-clamp-2 mb-1">${item.nombre}</h4>
            <p class="text-sm text-text-secondary mb-2">SKU: ${item.sku}</p>
            <div class="flex items-center gap-4">
              <div class="flex items-center gap-2 bg-gray-100 rounded-lg p-1">
                <button class="decrement-btn w-7 h-7 flex items-center justify-center hover:bg-white rounded transition-colors" data-product-id="${item.productId}">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/></svg>
                </button>
                <span class="item-quantity w-8 text-center font-semibold">${item.cantidad}</span>
                <button class="increment-btn w-7 h-7 flex items-center justify-center hover:bg-white rounded transition-colors" data-product-id="${item.productId}" data-stock="${item.stockDisponible}">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/></svg>
                </button>
              </div>
              <div class="text-sm text-text-secondary">${formatPrice(item.precio)} c/u</div>
            </div>
            ${item.cantidad >= item.stockDisponible ? '<p class="text-xs text-orange-600 mt-1">Stock máximo alcanzado</p>' : ''}
          </div>
          <div class="flex flex-col items-end justify-between">
            <button class="remove-btn text-text-secondary hover:text-red-600 transition-colors p-1" data-product-id="${item.productId}">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>
            </button>
            <div class="text-right">
              <p class="font-bold text-lg text-primary">${formatPrice(item.precio * item.cantidad)}</p>
            </div>
          </div>
        </div>
      `).join('');

      // Agregar event listeners a los botones
      attachItemEventListeners();
    }

    // Actualizar totales
    updateTotals(cart);
  }

  // Función para actualizar los totales
  function updateTotals(cart: Cart) {
    const subtotalEl = document.getElementById('cart-subtotal');
    const ivaEl = document.getElementById('cart-iva');
    const totalEl = document.getElementById('cart-total');

    if (subtotalEl) subtotalEl.textContent = formatPrice(cart.subtotal);
    if (ivaEl) ivaEl.textContent = formatPrice(cart.iva);
    if (totalEl) totalEl.textContent = formatPrice(cart.total);
  }

  // Función para agregar event listeners a los botones de los items
  function attachItemEventListeners() {
    // Botones de incrementar
    document.querySelectorAll('.increment-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLElement;
        const productId = target.dataset.productId;
        const stock = parseInt(target.dataset.stock || '0');

        if (productId) {
          const cart = cartStore.get();
          const item = cart.items.find(i => i.productId === productId);

          if (item && item.cantidad >= stock) {
            toastWarning('Has alcanzado el stock máximo disponible');
          } else {
            incrementQuantity(productId);
          }
        }
      });
    });

    // Botones de decrementar
    document.querySelectorAll('.decrement-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLElement;
        const productId = target.dataset.productId;
        if (productId) {
          const cart = cartStore.get();
          const item = cart.items.find(i => i.productId === productId);

          if (item && item.cantidad === 1) {
            toastInfo('Producto eliminado del carrito');
          }

          decrementQuantity(productId);
        }
      });
    });

    // Botones de eliminar
    document.querySelectorAll('.remove-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLElement;
        const productId = target.dataset.productId;
        if (productId) {
          const cart = cartStore.get();
          const item = cart.items.find(i => i.productId === productId);

          if (confirm('¿Estás seguro de que quieres eliminar este producto?')) {
            removeFromCart(productId);
            if (item) {
              toastSuccess(`${item.nombre} eliminado del carrito`);
            }
          }
        }
      });
    });
  }

  // Suscribirse a cambios en el carrito
  cartStore.subscribe((cart) => {
    renderCartItems(cart);
  });

  // Renderizar carrito inicial
  renderCartItems(cartStore.get());
</script>
