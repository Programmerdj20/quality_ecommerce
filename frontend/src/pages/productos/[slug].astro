---
/**
 * Página de detalle de producto individual
 * Ruta dinámica: /productos/[slug]
 */

import BaseLayout from '@/layouts/BaseLayout.astro';
import { PLACEHOLDER_PRODUCTS } from '@/utils/api/placeholderData';
import type { Product } from '@/types';

// Generar rutas estáticas para todos los productos
export async function getStaticPaths() {
  return PLACEHOLDER_PRODUCTS.map((product) => ({
    params: { slug: product.slug },
  }));
}

// Obtener el slug de la URL
const { slug } = Astro.params;

// Buscar el producto
const product = PLACEHOLDER_PRODUCTS.find(p => p.slug === slug);

// Si no existe, retornar 404
if (!product) {
  return Astro.redirect('/404');
}

// Calcular descuento
const descuento = product.precioDescuento
  ? Math.round((1 - product.precioDescuento / product.precio) * 100)
  : 0;

const precioFinal = product.precioDescuento || product.precio;

// Formato de precio colombiano
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
};

// Productos relacionados (misma categoría)
const productosRelacionados = PLACEHOLDER_PRODUCTS
  .filter(p => p.categoria === product.categoria && p.id !== product.id && p.activo)
  .slice(0, 4);
---

<BaseLayout
  title={`${product.nombre} | Quality Ecommerce`}
  description={product.descripcion}
>
  <div class="container mx-auto px-4 py-8">
    <!-- Breadcrumbs -->
    <nav class="flex items-center gap-2 text-sm text-text-secondary mb-8">
      <a href="/" class="hover:text-primary transition-colors">Inicio</a>
      <span>/</span>
      <a href="/productos" class="hover:text-primary transition-colors">Productos</a>
      <span>/</span>
      <a href={`/productos/${product.categoria}`} class="hover:text-primary transition-colors capitalize">
        {product.categoria}
      </a>
      <span>/</span>
      <span class="text-text">{product.nombre}</span>
    </nav>

    <!-- Contenido Principal -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 mb-16">
      <!-- Galería de Imágenes -->
      <div class="space-y-4">
        <!-- Imagen Principal -->
        <div class="relative aspect-square bg-gray-50 rounded-xl overflow-hidden border border-gray-200">
          <img
            id="main-image"
            src={product.imagenes.principal}
            alt={product.nombre}
            class="w-full h-full object-cover"
          />

          <!-- Badge de Descuento -->
          {descuento > 0 && (
            <div class="absolute top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-full text-base font-black shadow-xl border-2 border-white">
              -{descuento}%
            </div>
          )}

          <!-- Badge de Stock Bajo -->
          {product.stock > 0 && product.stock <= 5 && (
            <div class="absolute top-4 left-4 bg-orange-500 text-white px-3 py-1.5 rounded-full text-sm font-semibold">
              ¡Solo {product.stock} disponibles!
            </div>
          )}
        </div>

        <!-- Miniaturas -->
        {product.imagenes.galeria && product.imagenes.galeria.length > 0 && (
          <div class="grid grid-cols-4 gap-3">
            <button
              class="thumbnail active aspect-square rounded-lg overflow-hidden border-2 border-primary cursor-pointer hover:opacity-80 transition-opacity"
              data-image={product.imagenes.principal}
            >
              <img src={product.imagenes.principal} alt={product.nombre} class="w-full h-full object-cover" />
            </button>
            {product.imagenes.galeria.map((img) => (
              <button
                class="thumbnail aspect-square rounded-lg overflow-hidden border-2 border-gray-200 cursor-pointer hover:border-primary hover:opacity-80 transition-all"
                data-image={img}
              >
                <img src={img} alt={product.nombre} class="w-full h-full object-cover" />
              </button>
            ))}
          </div>
        )}
      </div>

      <!-- Información del Producto -->
      <div class="flex flex-col">
        <!-- Categoría -->
        <a
          href={`/productos/${product.categoria}`}
          class="inline-block text-sm uppercase tracking-wide text-primary font-semibold mb-3 hover:underline"
        >
          {product.categoria}
        </a>

        <!-- Nombre -->
        <h1 class="font-heading font-bold text-3xl md:text-4xl text-text mb-4">
          {product.nombre}
        </h1>

        <!-- SKU -->
        <p class="text-sm text-text-secondary mb-6">
          SKU: <span class="font-mono">{product.sku}</span>
        </p>

        <!-- Precio -->
        <div class="flex items-baseline gap-3 mb-6 pb-6 border-b border-gray-200">
          <span class="text-4xl md:text-5xl font-black text-green-600">
            {formatPrice(precioFinal)}
          </span>
          {product.precioDescuento && (
            <span class="text-xl text-gray-400 line-through font-medium">
              {formatPrice(product.precio)}
            </span>
          )}
        </div>

        <!-- Descripción -->
        <div class="mb-6">
          <h2 class="font-heading font-bold text-xl text-text mb-3">Descripción</h2>
          <p class="text-text-secondary leading-relaxed">
            {product.descripcion}
          </p>
        </div>

        <!-- Características -->
        {product.caracteristicas && Object.keys(product.caracteristicas).length > 0 && (
          <div class="mb-8">
            <h2 class="font-heading font-bold text-xl text-text mb-3">Características</h2>
            <dl class="grid grid-cols-1 gap-3">
              {Object.entries(product.caracteristicas).map(([key, value]) => (
                <div class="flex justify-between py-2 px-4 bg-gray-50 rounded-lg">
                  <dt class="font-semibold text-text">{key}:</dt>
                  <dd class="text-text-secondary">{value}</dd>
                </div>
              ))}
            </dl>
          </div>
        )}

        <!-- Stock y Botón Agregar -->
        <div class="mt-auto">
          <!-- Indicador de Stock -->
          <div class="flex items-center gap-2 mb-4">
            {product.stock > 0 ? (
              <>
                <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <span class="text-green-700 font-semibold">
                  {product.stock > 10 ? 'En stock' : `Solo ${product.stock} disponibles`}
                </span>
              </>
            ) : (
              <>
                <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                <span class="text-red-700 font-semibold">Agotado</span>
              </>
            )}
          </div>

          <!-- Controles de Cantidad y Botón -->
          <div class="flex flex-col sm:flex-row gap-4">
            <!-- Cantidad -->
            <div class="flex items-center gap-3 bg-gray-100 rounded-lg p-2">
              <button
                id="decrement-qty"
                class="w-10 h-10 flex items-center justify-center hover:bg-white rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={product.stock === 0}
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
                </svg>
              </button>

              <input
                type="number"
                id="quantity"
                value="1"
                min="1"
                max={product.stock}
                class="w-16 text-center font-bold text-lg bg-transparent border-none focus:outline-none"
                readonly
              />

              <button
                id="increment-qty"
                class="w-10 h-10 flex items-center justify-center hover:bg-white rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={product.stock === 0}
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
              </button>
            </div>

            <!-- Botón Agregar al Carrito -->
            <button
              id="add-to-cart-detail"
              data-product={JSON.stringify({
                id: product.id,
                sku: product.sku,
                nombre: product.nombre,
                precio: precioFinal,
                imagen: product.imagenes.principal,
                stockDisponible: product.stock
              })}
              class={`
                flex-1 py-4 px-8 rounded-lg font-bold text-lg
                transition-all duration-200
                flex items-center justify-center gap-2
                ${product.stock > 0
                  ? 'bg-orange-500 border-2 border-orange-600 text-white hover:bg-orange-600 hover:shadow-lg hover:scale-105 active:scale-95'
                  : 'bg-gray-200 border-2 border-gray-300 text-gray-500 cursor-not-allowed'
                }
              `}
              disabled={product.stock === 0}
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
              </svg>
              <span>{product.stock > 0 ? 'Agregar al Carrito' : 'Agotado'}</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Productos Relacionados -->
    {productosRelacionados.length > 0 && (
      <section class="border-t border-gray-200 pt-12">
        <h2 class="font-heading font-bold text-2xl md:text-3xl text-text mb-8">
          Productos Relacionados
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {productosRelacionados.map((p) => {
            const descRelacionado = p.precioDescuento
              ? Math.round((1 - p.precioDescuento / p.precio) * 100)
              : 0;
            const precioRelacionado = p.precioDescuento || p.precio;

            return (
              <a
                href={`/productos/${p.slug}`}
                class="group bg-white rounded-xl shadow-md hover:shadow-2xl transition-all duration-300 overflow-hidden border border-gray-100"
              >
                <div class="relative aspect-square overflow-hidden bg-gray-50">
                  <img
                    src={p.imagenes.principal}
                    alt={p.nombre}
                    class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                  />
                  {descRelacionado > 0 && (
                    <div class="absolute top-2 right-2 bg-red-600 text-white px-3 py-1 rounded-full text-sm font-bold">
                      -{descRelacionado}%
                    </div>
                  )}
                </div>
                <div class="p-4">
                  <h3 class="font-semibold text-text line-clamp-2 mb-2 group-hover:text-primary transition-colors">
                    {p.nombre}
                  </h3>
                  <div class="flex items-baseline gap-2">
                    <span class="text-2xl font-black text-green-600">
                      {formatPrice(precioRelacionado)}
                    </span>
                    {p.precioDescuento && (
                      <span class="text-sm text-gray-400 line-through">
                        {formatPrice(p.precio)}
                      </span>
                    )}
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </section>
    )}
  </div>
</BaseLayout>

<script>
  import { addToCart } from '@/stores/cartStore';
  import { toastSuccess, toastError, toastWarning } from '@/stores/toastStore';

  // Galería de imágenes
  const mainImage = document.getElementById('main-image') as HTMLImageElement;
  const thumbnails = document.querySelectorAll('.thumbnail');

  thumbnails.forEach(thumb => {
    thumb.addEventListener('click', () => {
      const newImage = thumb.getAttribute('data-image');
      if (newImage && mainImage) {
        mainImage.src = newImage;

        // Actualizar estado activo
        thumbnails.forEach(t => t.classList.remove('active', 'border-primary'));
        thumbnails.forEach(t => t.classList.add('border-gray-200'));
        thumb.classList.add('active', 'border-primary');
        thumb.classList.remove('border-gray-200');
      }
    });
  });

  // Control de cantidad
  const quantityInput = document.getElementById('quantity') as HTMLInputElement;
  const incrementBtn = document.getElementById('increment-qty');
  const decrementBtn = document.getElementById('decrement-qty');

  incrementBtn?.addEventListener('click', () => {
    const currentValue = parseInt(quantityInput.value);
    const maxValue = parseInt(quantityInput.max);

    if (currentValue < maxValue) {
      quantityInput.value = (currentValue + 1).toString();
    } else {
      toastWarning('Has alcanzado el stock máximo disponible');
    }
  });

  decrementBtn?.addEventListener('click', () => {
    const currentValue = parseInt(quantityInput.value);
    if (currentValue > 1) {
      quantityInput.value = (currentValue - 1).toString();
    }
  });

  // Agregar al carrito
  const addToCartBtn = document.getElementById('add-to-cart-detail');
  addToCartBtn?.addEventListener('click', () => {
    const productData = addToCartBtn.dataset.product;
    const quantity = parseInt(quantityInput.value);

    if (productData) {
      try {
        const product = JSON.parse(productData);
        const success = addToCart(product, quantity);

        if (success) {
          toastSuccess(`${quantity}x ${product.nombre} agregado${quantity > 1 ? 's' : ''} al carrito`);

          // Feedback visual
          const originalContent = addToCartBtn.innerHTML;
          addToCartBtn.innerHTML = '✓ Agregado al Carrito';
          addToCartBtn.classList.add('bg-green-600', 'border-green-700');
          addToCartBtn.classList.remove('bg-orange-500', 'border-orange-600');

          setTimeout(() => {
            addToCartBtn.innerHTML = originalContent;
            addToCartBtn.classList.remove('bg-green-600', 'border-green-700');
            addToCartBtn.classList.add('bg-orange-500', 'border-orange-600');
          }, 2000);
        } else {
          toastError(`No hay suficiente stock de ${product.nombre}`);
        }
      } catch (error) {
        console.error('Error al agregar al carrito:', error);
        toastError('Error al agregar el producto');
      }
    }
  });
</script>
